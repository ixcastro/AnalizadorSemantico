// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: src/main/jflex/tokenCup.jflex

package jflex;
import java_cup.runtime.Symbol;
import java_cup.runtime.SymbolFactory;
import java.io.StringReader;
import jcup.Symbols;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\2\0\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\7\23\2\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\0\6\33"+
    "\21\34\1\35\2\34\1\36\1\37\1\40\1\41\2\0"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\53\1\62\1\63\1\64\1\65\1\66\1\67\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\6\0\1\3"+
    "\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0\2\3"+
    "\5\0\1\1\57\0\1\1\240\0\1\1\377\0\u0100\77";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\2"+
    "\2\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\17\24\1\30\1\31\1\32\1\33"+
    "\1\34\1\0\1\35\1\0\1\36\1\37\1\40\2\0"+
    "\1\41\1\42\1\43\1\44\1\0\1\45\1\46\2\2"+
    "\1\0\1\47\2\0\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\6\24\1\56\6\24\1\57\14\24\1\60\1\61"+
    "\1\62\2\0\2\63\1\64\1\65\1\66\13\24\1\67"+
    "\1\24\1\70\21\24\1\0\1\71\1\24\1\72\1\73"+
    "\4\24\1\74\1\75\2\24\1\76\1\77\1\100\13\24"+
    "\1\101\3\24\1\2\1\102\1\103\4\24\1\104\2\24"+
    "\1\105\6\24\1\106\2\24\1\107\1\110\2\24\1\111"+
    "\1\112\1\24\1\113\1\114\1\115\1\116\1\117\1\120"+
    "\4\24\1\121\1\24\1\122\2\24\1\123\1\124\1\125"+
    "\1\126";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\100\0\100\0\u0200\0\u0240\0\100\0\u0280\0\100"+
    "\0\u02c0\0\u0300\0\u0340\0\100\0\100\0\u0380\0\u03c0\0\u0400"+
    "\0\100\0\u0440\0\100\0\100\0\u0480\0\u04c0\0\u0500\0\u0540"+
    "\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740"+
    "\0\u0780\0\u07c0\0\u0800\0\u0840\0\100\0\u0880\0\100\0\100"+
    "\0\100\0\u0100\0\100\0\u08c0\0\100\0\100\0\100\0\u0900"+
    "\0\u0940\0\100\0\100\0\100\0\100\0\u0300\0\100\0\100"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\100"+
    "\0\100\0\100\0\u0b40\0\100\0\u0b80\0\u0bc0\0\u0c00\0\u0c40"+
    "\0\u0c80\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40"+
    "\0\u0e80\0\u0440\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000"+
    "\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140\0\u1180\0\100\0\100"+
    "\0\100\0\u11c0\0\u1200\0\u0a00\0\u0a80\0\u0ac0\0\100\0\100"+
    "\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400"+
    "\0\u1440\0\u1480\0\u14c0\0\u0440\0\u1500\0\u0440\0\u1540\0\u1580"+
    "\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u0440\0\u19c0\0\u0440\0\u0440\0\u1a00\0\u1a40\0\u1a80\0\u1ac0"+
    "\0\u0440\0\u0440\0\u1b00\0\u1b40\0\u0440\0\u0440\0\u0440\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80"+
    "\0\u1dc0\0\u1e00\0\u0440\0\u1e40\0\u1e80\0\u1ec0\0\u1200\0\u0440"+
    "\0\u0440\0\u1f00\0\u1f40\0\u1f80\0\u1fc0\0\u0440\0\u2000\0\u2040"+
    "\0\u0440\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u0440"+
    "\0\u2200\0\u2240\0\u0440\0\u0440\0\u2280\0\u22c0\0\u0440\0\u0440"+
    "\0\u2300\0\u0440\0\u0440\0\u0440\0\u0440\0\u0440\0\u0440\0\u2340"+
    "\0\u2380\0\u23c0\0\u2400\0\u0440\0\u2440\0\u0440\0\u2480\0\u24c0"+
    "\0\u0440\0\u0440\0\u0440\0\u0440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\3\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\2\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\3\32\1\33\1\2\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\32\1\45\2\32\1\46"+
    "\4\32\1\47\1\50\1\51\1\52\1\53\1\54\3\32"+
    "\1\55\1\56\1\57\1\60\103\0\1\3\125\0\1\61"+
    "\47\0\6\62\1\63\30\62\1\64\40\62\30\0\1\65"+
    "\57\0\1\66\17\0\1\67\47\0\2\70\1\0\6\70"+
    "\1\0\25\70\1\71\40\70\30\0\1\72\64\0\1\73"+
    "\12\0\1\74\66\0\1\75\2\0\1\76\2\23\3\0"+
    "\1\77\1\100\46\0\2\101\3\0\7\101\1\102\62\101"+
    "\1\0\2\103\3\0\15\103\2\104\1\105\10\103\1\106"+
    "\32\103\1\106\6\103\1\0\2\103\3\0\15\103\3\23"+
    "\52\103\30\0\1\107\1\110\77\0\1\111\77\0\1\112"+
    "\1\113\70\0\3\32\6\0\3\32\4\0\31\32\35\0"+
    "\1\114\71\0\3\32\6\0\3\32\4\0\23\32\1\115"+
    "\5\32\27\0\3\32\6\0\3\32\4\0\20\32\1\116"+
    "\10\32\27\0\3\32\6\0\3\32\4\0\1\117\6\32"+
    "\1\120\6\32\1\121\12\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\122\11\32\1\123\12\32\27\0\3\32"+
    "\6\0\3\32\4\0\13\32\1\124\1\32\1\125\10\32"+
    "\1\126\2\32\27\0\3\32\6\0\3\32\4\0\13\32"+
    "\1\127\2\32\1\130\12\32\27\0\3\32\6\0\3\32"+
    "\4\0\16\32\1\131\12\32\27\0\3\32\6\0\3\32"+
    "\4\0\5\32\1\132\7\32\1\133\13\32\27\0\3\32"+
    "\6\0\3\32\4\0\16\32\1\134\12\32\27\0\3\32"+
    "\6\0\3\32\4\0\4\32\1\135\24\32\27\0\3\32"+
    "\6\0\3\32\4\0\7\32\1\136\1\137\11\32\1\140"+
    "\2\32\1\141\3\32\27\0\3\32\6\0\3\32\4\0"+
    "\27\32\1\142\1\32\27\0\3\32\6\0\3\32\4\0"+
    "\15\32\1\143\13\32\27\0\3\32\6\0\3\32\4\0"+
    "\16\32\1\144\12\32\27\0\3\32\6\0\3\32\4\0"+
    "\7\32\1\145\10\32\1\146\10\32\35\0\1\147\43\0"+
    "\1\150\11\0\1\62\24\0\3\62\1\0\1\62\2\0"+
    "\31\62\16\0\1\151\130\0\26\70\1\152\2\70\5\0"+
    "\2\101\3\0\72\101\1\0\2\102\3\153\72\102\1\153"+
    "\22\0\3\154\53\0\2\103\3\0\15\103\2\104\1\155"+
    "\52\103\1\0\2\103\3\0\15\103\3\155\52\103\23\0"+
    "\3\156\6\0\1\156\6\0\6\156\60\0\1\157\77\0"+
    "\1\160\71\0\3\32\6\0\3\32\4\0\22\32\1\161"+
    "\6\32\27\0\3\32\6\0\3\32\4\0\4\32\1\162"+
    "\24\32\27\0\3\32\6\0\3\32\4\0\21\32\1\163"+
    "\7\32\27\0\3\32\6\0\3\32\4\0\1\164\30\32"+
    "\27\0\3\32\6\0\3\32\4\0\15\32\1\165\13\32"+
    "\27\0\3\32\6\0\3\32\4\0\5\32\1\166\23\32"+
    "\27\0\3\32\6\0\3\32\4\0\23\32\1\167\5\32"+
    "\27\0\3\32\6\0\3\32\4\0\21\32\1\170\7\32"+
    "\27\0\3\32\6\0\3\32\4\0\23\32\1\171\5\32"+
    "\27\0\3\32\6\0\3\32\4\0\22\32\1\172\6\32"+
    "\27\0\3\32\6\0\3\32\4\0\16\32\1\173\12\32"+
    "\27\0\3\32\6\0\3\32\4\0\20\32\1\174\10\32"+
    "\27\0\3\32\6\0\3\32\4\0\22\32\1\175\6\32"+
    "\27\0\3\32\6\0\3\32\4\0\22\32\1\176\6\32"+
    "\27\0\3\32\6\0\3\32\4\0\15\32\1\177\13\32"+
    "\27\0\3\32\6\0\3\32\4\0\1\200\5\32\1\201"+
    "\13\32\1\202\6\32\27\0\3\32\6\0\3\32\4\0"+
    "\16\32\1\203\12\32\27\0\3\32\6\0\3\32\4\0"+
    "\6\32\1\204\21\32\1\205\27\0\3\32\6\0\3\32"+
    "\4\0\1\206\17\32\1\207\10\32\27\0\3\32\6\0"+
    "\3\32\4\0\10\32\1\210\20\32\27\0\3\32\6\0"+
    "\3\32\4\0\17\32\1\211\11\32\27\0\3\32\6\0"+
    "\3\32\4\0\10\32\1\212\10\32\1\213\7\32\27\0"+
    "\3\32\6\0\3\32\4\0\10\32\1\214\2\32\1\215"+
    "\15\32\27\0\3\32\6\0\3\32\4\0\10\32\1\216"+
    "\20\32\27\0\3\32\6\0\3\32\4\0\10\32\1\217"+
    "\20\32\16\0\1\151\10\0\3\152\53\0\14\153\1\220"+
    "\63\153\22\0\3\32\6\0\3\32\4\0\16\32\1\221"+
    "\12\32\27\0\3\32\6\0\3\32\4\0\1\222\30\32"+
    "\27\0\3\32\6\0\3\32\4\0\4\32\1\223\24\32"+
    "\27\0\3\32\6\0\3\32\4\0\20\32\1\224\10\32"+
    "\27\0\3\32\6\0\3\32\4\0\21\32\1\225\1\226"+
    "\6\32\27\0\3\32\6\0\3\32\4\0\1\227\30\32"+
    "\27\0\3\32\6\0\3\32\4\0\1\32\1\230\27\32"+
    "\27\0\3\32\6\0\3\32\4\0\4\32\1\231\24\32"+
    "\27\0\3\32\6\0\3\32\4\0\14\32\1\232\14\32"+
    "\27\0\3\32\6\0\3\32\4\0\4\32\1\233\24\32"+
    "\27\0\3\32\6\0\3\32\4\0\1\234\30\32\27\0"+
    "\3\32\6\0\3\32\4\0\16\32\1\235\12\32\27\0"+
    "\3\32\6\0\3\32\4\0\6\32\1\236\22\32\27\0"+
    "\3\32\6\0\3\32\4\0\3\32\1\237\25\32\27\0"+
    "\3\32\6\0\3\32\4\0\10\32\1\240\20\32\27\0"+
    "\3\32\6\0\3\32\4\0\23\32\1\241\5\32\27\0"+
    "\3\32\6\0\3\32\4\0\20\32\1\242\10\32\27\0"+
    "\3\32\6\0\3\32\4\0\15\32\1\243\13\32\27\0"+
    "\3\32\6\0\3\32\4\0\4\32\1\244\24\32\27\0"+
    "\3\32\6\0\3\32\4\0\22\32\1\245\6\32\27\0"+
    "\3\32\6\0\3\32\4\0\23\32\1\246\5\32\27\0"+
    "\3\32\6\0\3\32\4\0\22\32\1\247\6\32\27\0"+
    "\3\32\6\0\3\32\4\0\4\32\1\250\24\32\27\0"+
    "\3\32\6\0\3\32\4\0\16\32\1\251\12\32\27\0"+
    "\3\32\6\0\3\32\4\0\10\32\1\252\20\32\27\0"+
    "\3\32\6\0\3\32\4\0\3\32\1\253\25\32\27\0"+
    "\3\32\6\0\3\32\4\0\1\254\30\32\27\0\3\32"+
    "\6\0\3\32\4\0\13\32\1\255\15\32\27\0\3\32"+
    "\6\0\3\32\4\0\22\32\1\256\6\32\5\0\14\153"+
    "\1\220\4\153\1\257\56\153\22\0\3\32\6\0\3\32"+
    "\4\0\12\32\1\260\16\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\261\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\10\32\1\262\20\32\27\0\3\32\6\0\3\32"+
    "\4\0\23\32\1\263\5\32\27\0\3\32\6\0\3\32"+
    "\4\0\13\32\1\264\15\32\27\0\3\32\6\0\3\32"+
    "\4\0\20\32\1\265\10\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\266\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\21\32\1\267\7\32\27\0\3\32\6\0\3\32"+
    "\4\0\20\32\1\270\10\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\271\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\272\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\16\32\1\273\12\32\27\0\3\32\6\0\3\32"+
    "\4\0\10\32\1\274\20\32\27\0\3\32\6\0\3\32"+
    "\4\0\2\32\1\275\26\32\27\0\3\32\6\0\3\32"+
    "\4\0\2\32\1\276\26\32\27\0\3\32\6\0\3\32"+
    "\4\0\3\32\1\277\25\32\27\0\3\32\6\0\3\32"+
    "\4\0\15\32\1\300\13\32\27\0\3\32\6\0\3\32"+
    "\4\0\6\32\1\301\22\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\302\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\303\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\304\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\15\32\1\305\13\32\27\0\3\32\6\0\3\32"+
    "\4\0\13\32\1\306\15\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\307\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\15\32\1\310\13\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\311\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\15\32\1\312\13\32\27\0\3\32\6\0\3\32"+
    "\4\0\3\32\1\313\25\32\27\0\3\32\6\0\3\32"+
    "\4\0\5\32\1\314\23\32\27\0\3\32\6\0\3\32"+
    "\4\0\2\32\1\315\26\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\316\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\7\32\1\317\21\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\320\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\15\32\1\321\13\32\27\0\3\32\6\0\3\32"+
    "\4\0\10\32\1\322\20\32\27\0\3\32\6\0\3\32"+
    "\4\0\23\32\1\323\5\32\27\0\3\32\6\0\3\32"+
    "\4\0\22\32\1\324\6\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\325\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\5\32\1\326\23\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\327\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\13\32\1\330\15\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\331\24\32\27\0\3\32\6\0\3\32"+
    "\4\0\20\32\1\332\10\32\27\0\3\32\6\0\3\32"+
    "\4\0\3\32\1\333\25\32\27\0\3\32\6\0\3\32"+
    "\4\0\4\32\1\334\24\32\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9472];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\2\11\2\1\1\11\1\1\1\11"+
    "\3\1\2\11\3\1\1\11\1\1\2\11\20\1\1\11"+
    "\1\1\3\11\1\0\1\11\1\0\3\11\2\0\4\11"+
    "\1\0\2\11\2\1\1\0\1\1\2\0\1\1\3\11"+
    "\1\1\1\11\32\1\3\11\2\0\3\1\2\11\37\1"+
    "\1\0\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    public Lexer(String line) {
        this(new StringReader(line));
    }

    public Symbol symbol(String name, int sym){
        System.out.println(name);
        int line = yyline + 1;
        int column = yycolumn + 1;
        return new Symbol(sym, line, column);
    }

    public Symbol symbol(String name, int sym, Object value) {
        System.out.println(name);
        int line = yyline + 1;
        int column = yycolumn + 1;
        return new Symbol(sym, line, column, value);
    }

    public void lexerError(String err){
        System.out.println("Error léxico " + err + " en linea: " + yyline + " y en columna: " + yycolumn);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { int row = yyline + 1;
  int column = yycolumn + 1;
  System.out.println("Lexical error " + yytext() + " at line: " + row + " and column: " + column);
            }
            // fall through
          case 87: break;
          case 2:
            { 
            }
            // fall through
          case 88: break;
          case 3:
            { return symbol("NOT", Symbols.NOT);
            }
            // fall through
          case 89: break;
          case 4:
            { return symbol("MODULE", Symbols.MODULE);
            }
            // fall through
          case 90: break;
          case 5:
            { return symbol("BIT_AND", Symbols.BIT_AND);
            }
            // fall through
          case 91: break;
          case 6:
            { return symbol("RBO", Symbols.RBO);
            }
            // fall through
          case 92: break;
          case 7:
            { return symbol("RBC", Symbols.RBC);
            }
            // fall through
          case 93: break;
          case 8:
            { return symbol("TIMES", Symbols.TIMES);
            }
            // fall through
          case 94: break;
          case 9:
            { return symbol("PLUS", Symbols.PLUS);
            }
            // fall through
          case 95: break;
          case 10:
            { return symbol("COMMA", Symbols.COMMA);
            }
            // fall through
          case 96: break;
          case 11:
            { return symbol("MINUS", Symbols.MINUS);
            }
            // fall through
          case 97: break;
          case 12:
            { return symbol("DOT", Symbols.DOT);
            }
            // fall through
          case 98: break;
          case 13:
            { return symbol("DEC_LIT", Symbols.DEC_LIT, Integer.parseInt(yytext()));
            }
            // fall through
          case 99: break;
          case 14:
            { return symbol("COLON", Symbols.COLON);
            }
            // fall through
          case 100: break;
          case 15:
            { return symbol("SEMICOLON", Symbols.SEMICOLON);
            }
            // fall through
          case 101: break;
          case 16:
            { return symbol("LESS", Symbols.LESS);
            }
            // fall through
          case 102: break;
          case 17:
            { return symbol("EQUAL", Symbols.EQUAL);
            }
            // fall through
          case 103: break;
          case 18:
            { return symbol("GREATER", Symbols.GREATER);
            }
            // fall through
          case 104: break;
          case 19:
            { return symbol("TERNARY", Symbols.TERNARY);
            }
            // fall through
          case 105: break;
          case 20:
            { return symbol("IDENTIFIER", Symbols.IDENTIFIER, yytext());
            }
            // fall through
          case 106: break;
          case 21:
            { return symbol("SBO", Symbols.SBO);
            }
            // fall through
          case 107: break;
          case 22:
            { return symbol("SBC", Symbols.SBC);
            }
            // fall through
          case 108: break;
          case 23:
            { return symbol("XOR", Symbols.XOR);
            }
            // fall through
          case 109: break;
          case 24:
            { return symbol("CBO", Symbols.CBO);
            }
            // fall through
          case 110: break;
          case 25:
            { return symbol("BIT_OR", Symbols.BIT_OR);
            }
            // fall through
          case 111: break;
          case 26:
            { return symbol("CBC", Symbols.CBC);
            }
            // fall through
          case 112: break;
          case 27:
            { return symbol("COMPLEMENT", Symbols.COMPLEMENT);
            }
            // fall through
          case 113: break;
          case 28:
            { return symbol("NOT_EQUAL", Symbols.NOT_EQUAL);
            }
            // fall through
          case 114: break;
          case 29:
            { return symbol("STRING_LIT", Symbols.STRING_LIT, yytext());
            }
            // fall through
          case 115: break;
          case 30:
            { return symbol("MOD_ASSIGNMENT", Symbols.MOD_ASSIGNMENT);
            }
            // fall through
          case 116: break;
          case 31:
            { return symbol("AND", Symbols.AND);
            }
            // fall through
          case 117: break;
          case 32:
            { return symbol("AND_ASSIGNMENT", Symbols.AND_ASSIGNMENT);
            }
            // fall through
          case 118: break;
          case 33:
            { return symbol("TIMES_ASSIGNMENT", Symbols.TIMES_ASSIGNMENT);
            }
            // fall through
          case 119: break;
          case 34:
            { return symbol("INCREMENT", Symbols.INCREMENT);
            }
            // fall through
          case 120: break;
          case 35:
            { return symbol("PLUS_ASSIGNMENT", Symbols.PLUS_ASSIGNMENT);
            }
            // fall through
          case 121: break;
          case 36:
            { return symbol("DECREMENT", Symbols.DECREMENT);
            }
            // fall through
          case 122: break;
          case 37:
            { return symbol("MINUS_ASSIGNMENT", Symbols.MINUS_ASSIGNMENT);
            }
            // fall through
          case 123: break;
          case 38:
            { return symbol("OP", Symbols.OP);
            }
            // fall through
          case 124: break;
          case 39:
            { return symbol("OCTAL_LIT", Symbols.OCTAL_LIT, Integer.parseInt(yytext(), 8));
            }
            // fall through
          case 125: break;
          case 40:
            { return symbol("LEFT_SHIFT", Symbols.LEFT_SHIFT);
            }
            // fall through
          case 126: break;
          case 41:
            { return symbol("LESS_EQUAL", Symbols.LESS_EQUAL);
            }
            // fall through
          case 127: break;
          case 42:
            { return symbol("EQUAL_EQUAL", Symbols.EQUAL_EQUAL);
            }
            // fall through
          case 128: break;
          case 43:
            { return symbol("GREATER_EQUAL", Symbols.GREATER_EQUAL);
            }
            // fall through
          case 129: break;
          case 44:
            { return symbol("RIGHT_SHIFT", Symbols.RIGHT_SHIFT);
            }
            // fall through
          case 130: break;
          case 45:
            { return symbol("XOR_ASSIGNMENT", Symbols.XOR_ASSIGNMENT);
            }
            // fall through
          case 131: break;
          case 46:
            { return symbol("do", Symbols.DO);
            }
            // fall through
          case 132: break;
          case 47:
            { return symbol("if", Symbols.IF);
            }
            // fall through
          case 133: break;
          case 48:
            { return symbol("OR_ASSIGNMENT", Symbols.OR_ASSIGNMENT);
            }
            // fall through
          case 134: break;
          case 49:
            { return symbol("OR", Symbols.OR);
            }
            // fall through
          case 135: break;
          case 50:
            { return symbol("CHAR_LIT", Symbols.CHAR_LIT, yytext());
            }
            // fall through
          case 136: break;
          case 51:
            { return symbol("DOUBLE_LIT", Symbols.DOUBLE_LIT, Double.parseDouble(yytext()));
            }
            // fall through
          case 137: break;
          case 52:
            { return symbol("HEX_LIT", Symbols.HEX_LIT, Integer.parseInt(yytext(), 16));
            }
            // fall through
          case 138: break;
          case 53:
            { return symbol("LEFT_SHIFT_ASSIGNMENT", Symbols.LEFT_SHIFT_ASSIGNMENT);
            }
            // fall through
          case 139: break;
          case 54:
            { return symbol("RIGHT_SHIFT_ASSIGNMENT", Symbols.RIGHT_SHIFT_ASSIGNMENT);
            }
            // fall through
          case 140: break;
          case 55:
            { return symbol("for", Symbols.FOR);
            }
            // fall through
          case 141: break;
          case 56:
            { return symbol("int", Symbols.INT);
            }
            // fall through
          case 142: break;
          case 57:
            { return symbol("auto", Symbols.AUTO);
            }
            // fall through
          case 143: break;
          case 58:
            { return symbol("case", Symbols.CASE);
            }
            // fall through
          case 144: break;
          case 59:
            { return symbol("char", Symbols.CHAR);
            }
            // fall through
          case 145: break;
          case 60:
            { return symbol("else", Symbols.ELSE);
            }
            // fall through
          case 146: break;
          case 61:
            { return symbol("enum", Symbols.ENUM);
            }
            // fall through
          case 147: break;
          case 62:
            { return symbol("goto", Symbols.GOTO);
            }
            // fall through
          case 148: break;
          case 63:
            { return symbol("long", Symbols.LONG);
            }
            // fall through
          case 149: break;
          case 64:
            { return symbol("read", Symbols.READ);
            }
            // fall through
          case 150: break;
          case 65:
            { return symbol("void", Symbols.VOID);
            }
            // fall through
          case 151: break;
          case 66:
            { return symbol("break", Symbols.BREAK);
            }
            // fall through
          case 152: break;
          case 67:
            { return symbol("const", Symbols.CONST);
            }
            // fall through
          case 153: break;
          case 68:
            { return symbol("float", Symbols.FLOAT);
            }
            // fall through
          case 154: break;
          case 69:
            { return symbol("short", Symbols.SHORT);
            }
            // fall through
          case 155: break;
          case 70:
            { return symbol("union", Symbols.UNION);
            }
            // fall through
          case 156: break;
          case 71:
            { return symbol("while", Symbols.WHILE);
            }
            // fall through
          case 157: break;
          case 72:
            { return symbol("write", Symbols.WRITE);
            }
            // fall through
          case 158: break;
          case 73:
            { return symbol("double", Symbols.DOUBLE);
            }
            // fall through
          case 159: break;
          case 74:
            { return symbol("extern", Symbols.EXTERN);
            }
            // fall through
          case 160: break;
          case 75:
            { return symbol("return", Symbols.RETURN);
            }
            // fall through
          case 161: break;
          case 76:
            { return symbol("signed", Symbols.SIGNED);
            }
            // fall through
          case 162: break;
          case 77:
            { return symbol("sizeof", Symbols.SIZEOF);
            }
            // fall through
          case 163: break;
          case 78:
            { return symbol("static", Symbols.STATIC);
            }
            // fall through
          case 164: break;
          case 79:
            { return symbol("struct", Symbols.STRUCT);
            }
            // fall through
          case 165: break;
          case 80:
            { return symbol("switch", Symbols.SWITCH);
            }
            // fall through
          case 166: break;
          case 81:
            { return symbol("default", Symbols.DEFAULT);
            }
            // fall through
          case 167: break;
          case 82:
            { return symbol("typedef", Symbols.TYPEDEF);
            }
            // fall through
          case 168: break;
          case 83:
            { return symbol("continue", Symbols.CONTINUE);
            }
            // fall through
          case 169: break;
          case 84:
            { return symbol("register", Symbols.REGISTER);
            }
            // fall through
          case 170: break;
          case 85:
            { return symbol("unsigned", Symbols.UNSIGNED);
            }
            // fall through
          case 171: break;
          case 86:
            { return symbol("volatile", Symbols.VOLATILE);
            }
            // fall through
          case 172: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
